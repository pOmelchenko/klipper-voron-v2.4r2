[mcu]
canbus_uuid: 38f8dd3cd7ac

[mcu sb2040]
canbus_uuid: fecdda7d75fe

[printer]
kinematics: corexy
max_velocity: 300
max_accel: 3000
minimum_cruise_ratio: 0.5
square_corner_velocity: 5.0
max_z_velocity: 15
max_z_accel: 350

# The stepper_x section is used to describe the X axis as well as the
# stepper controlling the X+Y movement.
## X Stepper on Motor1(B Motor)
[stepper_x]
step_pin: PE2
dir_pin: !PB4 # PB4 in default
enable_pin: !PC11
rotation_distance: 40
microsteps: 32 # 16 in deffault
full_steps_per_rotation: 200
endstop_pin: ^!PF3 # ^PF3 in default 
position_min: 0
position_endstop: 351 # 350 in default
position_max: 351 # 350 in default
homing_speed: 25
homing_retract_dist: 0 # 5.0 in default
homing_positive_dir: true

[tmc2240 stepper_x]
cs_pin: PC10
spi_software_sclk_pin: PA5
spi_software_mosi_pin: PA7
spi_software_miso_pin: PA6
interpolate: false
run_current: 1.0
stealthchop_threshold: 0

# The stepper_y section is used to describe the Y axis as well as the
# stepper controlling the X-Y movement.
## Y Stepper on Motor2 (A Motor)
[stepper_y]
step_pin: PF12
dir_pin: !PF11 # PF11 in default
enable_pin: !PB3
rotation_distance: 40
microsteps: 32 # 16 in deffault
full_steps_per_rotation: 200
endstop_pin: ^!PF4 # ^PF4 in default 
position_min: 0
position_endstop: 350 # 350 in default
position_max: 350 # 350 in default
homing_speed: 25
homing_retract_dist: 0 # 5.0 in default
homing_positive_dir: true

[tmc2240 stepper_y]
cs_pin: PF13
spi_software_sclk_pin: PA5
spi_software_mosi_pin: PA7
spi_software_miso_pin: PA6
interpolate: false
run_current: 1.0
stealthchop_threshold: 0

# The stepper_z section is used to describe the stepper controlling
# the Z axis.
## Z0 Stepper - Front Left on MOTOR3_A
[stepper_z]
step_pin: PD7
dir_pin: !PD6 # PD6 in default
enable_pin: !PF10
rotation_distance: 40
microsteps: 32 # 16 in deffault
full_steps_per_rotation: 200
gear_ratio: 80:16
endstop_pin: probe:z_virtual_endstop
position_min: -5
##  Z-position of nozzle (in mm) to z-endstop trigger point relative to print surface (Z0)
##  (+) value = endstop above Z0, (-) value = endstop below
##  Increasing position_endstop brings nozzle closer to the bed
##  After you run Z_ENDSTOP_CALIBRATE, position_endstop will be stored at the very end of your config
#position_endstop: -0.5
position_max: 326 # 340 in default
homing_speed: 10 # 8 in default
homing_retract_dist: 3
second_homing_speed: 3

[tmc2240 stepper_z]
cs_pin: PF9
spi_software_sclk_pin: PA5
spi_software_mosi_pin: PA7
spi_software_miso_pin: PA6
interpolate: false
run_current: 1.0
stealthchop_threshold: 0

## Z1 Stepper - Rear Left on Motor4
[stepper_z1]
step_pin: PD3
dir_pin: PD2
enable_pin: !PD5
rotation_distance: 40
microsteps: 32 # 16 in default
full_steps_per_rotation: 200
gear_ratio: 80:16

[tmc2240 stepper_z1]
cs_pin: PD4
spi_software_sclk_pin: PA5
spi_software_mosi_pin: PA7
spi_software_miso_pin: PA6
interpolate: false
run_current: 1.0
stealthchop_threshold: 0

## Z2 Stepper - Rear Right on Motor5
[stepper_z2]
step_pin: PC9 
dir_pin: !PC8 # PC8 in default
enable_pin: !PD1
rotation_distance: 40
microsteps: 32 # 16 in default
full_steps_per_rotation: 200
gear_ratio: 80:16

[tmc2240 stepper_z2]
cs_pin: PD0
spi_software_sclk_pin: PA5
spi_software_mosi_pin: PA7
spi_software_miso_pin: PA6
interpolate: false
run_current: 1.0
stealthchop_threshold: 0

## Z3 Stepper - Front Right on Motor6
[stepper_z3]
step_pin: PA10
dir_pin: PA14 # !PA14 in default
enable_pin: !PA15
rotation_distance: 40
microsteps: 32 # 16 in default
full_steps_per_rotation: 200
gear_ratio: 80:16

[tmc2240 stepper_z3]
cs_pin: PF8
spi_software_sclk_pin: PA5
spi_software_mosi_pin: PA7
spi_software_miso_pin: PA6
interpolate: false
run_current: 1.0
stealthchop_threshold: 0

[extruder]
step_pin: sb2040:gpio9
dir_pin: !sb2040:gpio10
enable_pin: !sb2040:gpio7
microsteps: 16
rotation_distance: 22.5767234693 # 22.6446574416 * ((120-20.3) / 100)
full_steps_per_rotation: 200
gear_ratio: 50:10
nozzle_diameter: 0.4
filament_diameter: 1.750
# max_extrude_cross_section: 5
max_extrude_only_distance: 100
pressure_advance: 0.045
pressure_advance_smooth_time: 0.045
heater_pin: sb2040:gpio6
max_power: 1.0
sensor_type: ATC Semitec 104NT-4-R025H42G
sensor_pin: sb2040:gpio27
min_extrude_temp: 170
min_temp: 10
max_temp: 270

[tmc2209 extruder]
uart_pin: sb2040:gpio8
interpolate: False
run_current: 0.6
sense_resistor: 0.110
stealthchop_threshold: 500

[heater_bed]
heater_pin: PE3
max_power: 0.6
sensor_type: Generic 3950
sensor_pin: PA0
min_temp: 0
max_temp: 125 # 120 in default

[bed_mesh]
speed: 300
horizontal_move_z: 5
mesh_min: 20, 20
mesh_max: 330, 330
probe_count: 9, 9
fade_start: 1.0
fade_end: 10.0
fade_target: 0
algorithm: bicubic
zero_reference_position: 175, 175
adaptive_margin: 5

[quad_gantry_level]
gantry_corners:
    -60,-10
    410,420
points:
    40, 40
    40, 310
    310, 310
    310, 40
   # 25, 25
   # 25, 325
   # 325, 325
   # 325, 25
speed: 100
horizontal_move_z: 10
max_adjust: 10
retries: 5
retry_tolerance: 0.0075

[safe_z_home]
home_xy_position: 175.0, 175.0
speed: 100
z_hop: 10

[gcode_macro M141]
description: PrusaSlicer chamber setpoint (log only)
gcode:
    {% set t = params.S|default(0)|int %}
    RESPOND TYPE=echo MSG={"M141 chamber target %dC"|format(t)}

[gcode_macro M191]
description: PrusaSlicer chamber wait -> CHAMBER_SOAK
gcode:
    {% set t = params.S|default(0)|int %}
    CHAMBER_SOAK TEMP={t} SENSOR="temperature_sensor Chamber_Back"

[gcode_macro NEVERMORE_ON]
description: Turn on Nevermore fan (default 100% or SPEED=0..1)
gcode:
    {% set s = params.SPEED|default(1.0)|float %}
    {% if s < 0 %}
        {% set s = 0.0 %}
    {% elif s > 1 %}
        {% set s = 1.0 %}
    {% endif %}
    
    SET_FAN_SPEED FAN=nevermore SPEED={s}

[gcode_macro NEVERMORE_OFF]
description: Turn off Nevermore fan
gcode:
    SET_FAN_SPEED FAN=nevermore SPEED=0

[gcode_macro CHAMBER_SOAK]
description: Wait chamber to reach TEMP using SENSOR and drive Nevermore by delta
gcode:
    {% set TARGET    = params.TEMP|default(0)|int %}
    {% set SENSOR_IN = params.SENSOR|default("temperature_sensor Chamber_Back")|string %}
    {% set SENSOR    = SENSOR_IN|replace('"','')|replace("'","") %}
    {% set LEAVEON   = params.LEAVEON|default(1)|int %}
    {% set DEADBAND  = params.DEADBAND|default(1.0)|float %}
    {% set SPD_HI    = params.SPD_HI|default(1.0)|float %}
    {% set SPD_MD    = params.SPD_MD|default(0.7)|float %}
    {% set SPD_LO    = params.SPD_LO|default(0.45)|float %}
    {% set SPD_MIN   = params.SPD_MIN|default(0.35)|float %}

    {% if TARGET > 0 %}
        {% set cur = printer[SENSOR].temperature|float %}
        {% set delta = TARGET - cur %}

        RESPOND TYPE=echo MSG={"Chamber soak to %dC (%s), current=%.1fC"|format(TARGET, SENSOR, cur)}

        {% if delta > 10 %}
            SET_FAN_SPEED FAN=nevermore SPEED={SPD_HI}   # было {{SPD_HI}}
        {% elif delta > 5 %}
            SET_FAN_SPEED FAN=nevermore SPEED={SPD_MD}   # было {{SPD_MD}}
        {% elif delta > 2 %}
            SET_FAN_SPEED FAN=nevermore SPEED={SPD_LO}   # было {{SPD_LO}}
        {% else %}
            SET_FAN_SPEED FAN=nevermore SPEED={SPD_MIN}  # было {{SPD_MIN}}
        {% endif %}

        # SENSOR с пробелом — оставляем во внешних кавычках
        TEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={TARGET - DEADBAND} MAXIMUM={TARGET + DEADBAND}  # было {{...}}

        RESPOND TYPE=echo MSG={"Chamber reached %dC ±%.1fC"|format(TARGET, DEADBAND)}

        {% if LEAVEON == 0 %}
            SET_FAN_SPEED FAN=nevermore SPEED=0
        {% endif %}
    {% endif %}

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
        G1 E-{E} F2100
    {% else %}
        {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
        G1 Z{z_safe} F900
        G90
        G1 X{x_park} Y{y_park} F6000
    {% else %}
        {action_respond_info("Printer not homed")}
    {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
        {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
        {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
        G91
        G1 E{E} F2100
    {% else %}
        {action_respond_info("Extruder not hot enough")}
    {% endif %}  
    RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: BASE_CANCEL_PRINT
gcode:
    M400
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set z_up = max(0.0, (5.0 if act_z <= max_z-5.0 else (max_z - act_z))) %}
    {% if "z" in printer.toolhead.homed_axes and z_up > 0.0 %}
        G91
        G1 Z{z_up} F900
        G90
    {% endif %}
    
    G28 X Y
    M107
    
    UPDATE_DELAYED_GCODE ID=_nevermore_tail DURATION=300
    TURN_OFF_HEATERS
    
    BED_MESH_CLEAR
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT

[gcode_macro START_PRINT]
gcode:
    UPDATE_DELAYED_GCODE ID=_nevermore_tail DURATION=0
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    {% set NEVERMORE = params.NEVERMORE|default(1)|int %}
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|int %}
    {% set CHAMBER_SENSOR = params.CHAMBER_SENSOR|default("temperature_sensor Chamber_Back") %}

    # Start bed heating (but don't wait for it)
    M140 S{BED_TEMP}
    G90
    G28

    # Включаем Nevermore по желанию/профилю
    {% if NEVERMORE == 1 %}
        NEVERMORE_ON SPEED={params.NEVERMORE_SPEED|default(1.0)}
    {% endif %}
    
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}

    # Опциональный выстой камеры до целевой температуры
    CHAMBER_SOAK TEMP={CHAMBER_TEMP} SENSOR="{CHAMBER_SENSOR}"
    
    # Build mesh
    BED_MESH_CLEAR
    QUAD_GANTRY_LEVEL

    G28 Z

    BED_MESH_CALIBRATE ADAPTIVE=1
    
    G1 Z20.0 F3000
    
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}

[gcode_macro END_PRINT]
gcode:
    M400
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set z_up = max(0.0, (5.0 if act_z <= max_z-5.0 else (max_z - act_z))) %}
    {% if "z" in printer.toolhead.homed_axes and z_up > 0.0 %}
        G91
        G1 Z{z_up} F900
        G90
    {% endif %}
    G28 X Y
    M107
    
    UPDATE_DELAYED_GCODE ID=_nevermore_tail DURATION=300
    TURN_OFF_HEATERS
    BED_MESH_CLEAR
    M84

[delayed_gcode set_display_colors]
initial_duration: 1
gcode:
    SET_LED LED=display RED=0.66 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0   # Top left Knob colour
    SET_LED LED=display RED=0.66 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0   # Bottom right knob colour
    SET_LED LED=display RED=0.66 GREEN=0 BLUE=0 INDEX=3              # Backlit Screen colour

[delayed_gcode _nevermore_reset]
initial_duration: 0.5
gcode:
    NEVERMORE_OFF

[delayed_gcode _nevermore_tail]
gcode:
    NEVERMORE_OFF

[idle_timeout]
timeout: 1800
gcode:
    NEVERMORE_OFF
    TURN_OFF_HEATERS

[virtual_sdcard]
path: /home/biqu/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

[pause_resume]
recover_velocity: 50

[respond]

[exclude_object]

[input_shaper]
shaper_freq_x: 53.2
shaper_type_x: mzv
shaper_freq_y: 37.8
shaper_type_y: mzv

[adxl345]
cs_pin: sb2040:gpio1
spi_software_sclk_pin: sb2040:gpio0
spi_software_mosi_pin: sb2040:gpio3
spi_software_miso_pin: sb2040:gpio2

[resonance_tester]
probe_points: 175, 175, 20
accel_chip: adxl345
min_freq: 5
max_freq: 133.33
accel_per_hz: 75
hz_per_sec: 1

[board_pins]
mcu: mcu
aliases:
    #                           EXP1 header 
    #####################################################################
    EXP1_2=PE10,  EXP1_4=PE12,  EXP1_6=PE14,  EXP1_8=PB10,  EXP1_10=<5V>,
    EXP1_1=PE9,   EXP1_3=PE11,  EXP1_5=PE13,  EXP1_7=PE15,  EXP1_9=<GND>,
    ########################## ^^^^^^^^^^^^^^ ###########################

    #                           EXP2 header 
    #####################################################################
    EXP2_2=PB13,  EXP2_4=PB12,  EXP2_6=PB11,  EXP2_8=<RST>, EXP2_10=<NC>,
    EXP2_1=PB14,  EXP2_3=PF7,   EXP2_5=PE7,   EXP2_7=PE8,   EXP2_9=<GND>
    ########################## ^^^^^^^^^^^^^^ ###########################

[probe]
pin: ^sb2040:gpio25
x_offset: 0.0
y_offset: 0.0
speed: 10.0
samples: 3
sample_retract_dist: 3.0
lift_speed: 10
samples_result: median
samples_tolerance: 0.006
samples_tolerance_retries: 3
activate_gcode:
    {% set PROBE_TEMP = 150 %}
    {% set MAX_TEMP = PROBE_TEMP + 5 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M109 S{ PROBE_TEMP }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
        {% endif %}
    {% endif %}

[verify_heater extruder]
max_error: 20
check_gain_time: 120
hysteresis: 50
heating_gain: 2

[verify_heater heater_bed]
max_error: 20
check_gain_time:120
hysteresis: 50
heating_gain: 2

[temperature_sensor BTT_CB1]
sensor_type: temperature_host

[temperature_sensor BTT_MANTA_M8P]
sensor_type: temperature_mcu

[temperature_sensor FLY_SB2040]
sensor_type: temperature_mcu
sensor_mcu: sb2040

[temperature_sensor Chamber_Head]
sensor_type: ATC Semitec 104GT-2
sensor_pin: sb2040:gpio26
min_temp: -50
max_temp: 350

[temperature_sensor Chamber_Back]
sensor_type: Generic 3950
sensor_pin: PA1
min_temp: -50
max_temp: 350

[fan]
pin: sb2040:gpio13

[heater_fan hotend_fan]
pin: sb2040:gpio14
heater: extruder
heater_temp: 50.0

[controller_fan mcu]
pin: PE5
max_power: 0.60
kick_start_time: 0.200
idle_speed: 0.30
stepper: stepper_x, stepper_y, stepper_z, stepper_z1, stepper_z2, stepper_z3

[controller_fan psu]
pin: PE4
max_power: 0.60
kick_start_time: 0.200
idle_speed: 0.30
stepper: stepper_x, stepper_y, stepper_z, stepper_z1, stepper_z2, stepper_z3

[fan_generic nevermore]
pin: PE6

[neopixel display]
pin: EXP1_6
chain_count: 3
initial_RED: 0.66
initial_GREEN: 0
initial_BLUE: 0
color_order: RGB

[neopixel head]
pin: sb2040:gpio12
chain_count: 12
color_order: GRBW
initial_RED: 0.66
initial_GREEN: 0
initial_BLUE: 0

[display]
#  mini12864 LCD Display
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
contrast: 63
spi_software_miso_pin: EXP2_1
spi_software_mosi_pin: EXP2_6
spi_software_sclk_pin: EXP2_2
menu_reverse_navigation: true

[display_status]

[menu __main __octoprint]
type: disabled

[shaketune]

########################################
# Override the default preheats
########################################
# [menu __main __temp __preheat_petg]
# type: list
# name: Preheat PETG
# index: 3

# [menu __main __temp __preheat_petg __all]
# type: command
# enable: {('extruder' in printer) and ('heater_bed' in printer)}
# name: Preheat all
# gcode:
#     M140 S85
#     M104 S235

# [menu __main __temp __preheat_petg __hotend]
# type: command
# enable: {'extruder' in printer}
# name: Preheat hotend
# gcode: M104 S235

# [menu __main __temp __preheat_petg __hotbed]
# type: command
# enable: {'heater_bed' in printer}
# name: Preheat hotbed
# gcode: M140 S85

# [menu __main __head_light]
# type: list
# name: Head light

# [menu __main __head_light __lightsonoff]
# type: input
# name: Lights: {'OFF' if menu.input else 'ON'}
# enable: {printer["gcode_macro HEAD_LIGHTS_TOGGLE"].lights_on}
# input: {printer["gcode_macro HEAD_LIGHTS_TOGGLE"].lights_on}
# input_min: 0
# input_max: 1
# input_step: 1
# gcode:
#     HEAD_LIGHTS_TOGGLE

# [menu __main __head_light __reset]
# type: command
# name: Reset
# gcode:
#     HEAD_LIGHTS_RESET

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 25.319
#*# pid_ki = 2.557
#*# pid_kd = 62.665
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 38.143
#*# pid_ki = 1.541
#*# pid_kd = 236.013
#*#
#*# [probe]
#*# z_offset = -0.760
